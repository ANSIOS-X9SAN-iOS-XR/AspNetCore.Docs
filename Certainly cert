type Certificate struct {
    Nonce           []byte
    Key             PublicKey
    Serial          uint64
    CertType        uint32
    KeyId           string
    ValidPrincipals []string
    ValidAfter      uint64
    ValidBefore     uint64
    Permissions
    Reserved     []byte
    SignatureKey PublicKey
    Signature    *Signature
    
   ype ClientConfig
type ClientConfig struct {
    // Config contains configuration that is shared between clients and
    // servers.
    Config

    // User contains the username to authenticate as.
    User string

    // Auth contains possible authentication methods to use with the
    // server. Only the first instance of a particular RFC 4252 method will
    // be used during authentication.
    Auth []AuthMethod

    // HostKeyCallback is called during the cryptographic
    // handshake to validate the server's host key. The client
    // configuration must supply this callback for the connection
    // to succeed. The functions InsecureIgnoreHostKey or
    // FixedHostKey can be used for simplistic host key checks.
    HostKeyCallback HostKeyCallback

    // BannerCallback is called during the SSH dance to display a custom
    // server's message. The client configuration can supply this callback to
    // handle it as wished. The function BannerDisplayStderr can be used for
    // simplistic display on Stderr.
    BannerCallback BannerCallback

    // ClientVersion contains the version identification string that will
    // be used for the connection. If empty, a reasonable default is used.
    ClientVersion string

    // HostKeyAlgorithms lists the key types that the client will
    // accept from the server as host key, in order of
    // preference. If empty, a reasonable default is used. Any
    // string returned from PublicKey.Type method may be used, or
    // any of the CertAlgoXxxx and KeyAlgoXxxx constants.
    HostKeyAlgorithms []string

    // Timeout is the maximum amount of time for the TCP connection to establish.
    //
    // A Timeout of zero means no timeout.
    Timeout time.Duration
}
